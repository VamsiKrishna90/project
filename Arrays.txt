int i = 10 ;
String name = "Siva";
int empId = 110;
int empId = 110;

An array is a container object that holds a fixed number of values of a single data type. The length of an array is established when the array is created. After creation, its length is fixed.

Each item in an array is called an element, and each element is accessed by its numerical index

int i = 34;
 i - reference for the memory location 
 34  - value that we are storing @ i 
 34  - the data type is integer 
    
School - class - roll numbers of the students 
 A collection of roll numbers  - integers   - rollcall
 A collection of sequential and of same data type items /entities is acalled as an Array 

Creating, Initializing, and Accessing an Array
One way to create an array is with the new operator. The next statement in the ArrayDemo program allocates an array with enough memory for 10 integer elements and assigns the array to the anArray variable.

// create an array of integers
int anArray[] ;
anArray = new int[10];

String empName[]  = new String[]{Varsha, Ravi, Anitha, Srinu}

String[] empName = new String[4];
empName[0] = Varsha;
empName[1] = Ravi;
empName[2] = Anitha;
empName[3] = Srinu;

If this statement is missing, then the compiler prints an error like the following, and compilation fails:

ArrayDemo.java:4: Variable anArray may not have been initialized.
The next few lines assign values to each element of the array:

anArray[0] = 100; // initialize first element
anArray[1] = 200; // initialize second element
anArray[2] = 300; // and so forth
Each array element is accessed by its numerical index:

System.out.println("Element 1 at index 0: " + anArray[0]);
System.out.println("Element 2 at index 1: " + anArray[1]);
System.out.println("Element 3 at index 2: " + anArray[2]);
Alternatively, you can use the shortcut syntax to create and initialize an array:

int[] anArray = { 
    100, 200, 300,
    400, 500, 600, 
    700, 800, 900, 1000
};


int student1 = s1;
int[] student2 ={ s2,s3};
int student3 = s3;
int student4 = s4
.
.
.
int student100 = 100;

datatype[] arrayvariableName = { arrayelement1,arrayelement2,arrayelement2,....arrayelementn}
int[] mystudents =  new int[size];
int[] mystudents =  {s1,s2,s3,s4,s5,..s100 }  ;
size is the total number of elements 
int mystudents[] =  {s1,s2,s3,s4,s5,..s100 }  ;
system.out.println(mystudents[4]);

You can also place the brackets after the array's name:

// this form is discouraged
float anArrayOfFloats[];

byte[] anArrayOfBytes;
short[] anArrayOfShorts;
long[] anArrayOfLongs;
float[] anArrayOfFloats;
double[] anArrayOfDoubles;
boolean[] anArrayOfBooleans;
char[] anArrayOfChars;
String[] anArrayOfStrings;

  put/get ----->mystudents[98] = s1;
int x = a[10];
a[10] = 'x';




Arrays -  A collection elements or items of same data type

Array Signature 

Declaration & Intialization
Declaration -----datatype[] variableName;
Intialization -----datatype[] variableName = {1,2,3,};

datatype[][] variableName = new dataType[10][10];
datatype[][] variableName = {{1,2,3,},{4,5,6}}

Single Dimensional Array
System.out.println(variableName [1]);
 
Multi Dimensional Array 
System.out.println(variableName [1][1]);

datatype[] variableName = {1,2,3,4,5,4,2,2,2,2,2,2,};

int [] empId = {1,2,3,4,5,4,2,2,2,2,2,2,};
//
for(i =0; i < empId .length;i++)
{
	System.Out.Println(empId[i]);
}
//
for(int myinteger :empId)
{

	System.Out.println(myinteger);
}
For Each loop

for(int a : variableName)
{
 	
	System.Out.println(a);
}


Assignment -----Create an Array and store integers 1 to 10 using for each loop and print the values using For loop 
------------------------------------------------------------------------------------------------------------------

// Java program to demonstrate passing of array to method 
  Array is a sequential collection of elements of same data type .
class Test 
{     
    // Driver method 
    public static void main(String args[])  
    { 
      //  int i[] = {3, 1, 2, 5, 4};    /// i[2] = 2;  -- index starts from 0
         // int i = 10 ;
       
     // passing array to method m1 
        sum(arr); 
      
    } 
  
    public static void sum(int i[] ,String[] s)  
    { 
        // getting sum of array values 
        int sum = 0; 
          
        for (int i = 0; i < =arr.length; i++) 
            sum=sum + arr[i]; 
          
        System.out.println("sum of array values : " + sum); 
    } 
} 


----------------------------------------------------------------------------------------------------------------------

// Java program to demonstrate  cloning of one-dimensional arrays 
If we create the clone of a single-dimensional array, it creates the deep copy of the Java array. It means, it will copy the actual value. But, if we create the clone of a multidimensional array, it creates the shallow copy of the Java array which means it copies the references.
  
class Test 
{     
    public static void main(String args[])  
    { 
        int Arr[] = {1,2,3}; 
          
        int cloneArray[] = Arr.clone(); 
          
        // will print false as deep copy is created 
        // for one-dimensional array 
        System.out.println(intArray == cloneArray); 
          
        for (int i = 0; i < cloneArray.length; i++) { 
            System.out.print(cloneArray[i]+" "); 
        } 
    } 
} 


// Java program to demonstrate return of array from method 
  
class Test 
{     
    // Driver method 
    public static void main(String args[])  
    { 
        int arr[] = m1();
          
        for (int i = 0; i < arr.length; i++) 
            System.out.print(arr[i]+" "); 
      
    } 
  
     public static int j[] m1()  
    { 
       
j[] = {1.2.3};
 // returning  array 
        return j[]; 
    } 
}


################################################################
class Test 
{
    public static void main(String args[])  
    { 
        int[] arr= m1();

              int arr[] = {10,11,12}

  for(i =0;i<arr.length;i++)
{
           System.out.print(arr[i]); 
      
    } 
  
     public static int[] m1()  
    { 
        int arr[] = {10,11,12} ;
        return arr;
    } 
}


int arr[][] = {{ 1,3,5,7},{2,6,8},{ 1,3,5,34},{2,6,8}};

arr[1][1] =6

arr[0][3]
arr[2][3]


int j[] = {1,2,3};
j[2]

arr[2] = 5 ;

arr.length
[4]

for(int i : arr)
{
	System.out.println(i*2);
}


for(int i=0,i<arr.length,i++)
{
    System.out.println( arr[i] );

}

1,3,5,7

--------------------------------------------------------------------------------------------------------------

Create and intialize an array 
Print the elements of an array using for loop 
Print the elements of an array using for each  loop 
Copying an array into another [ Values ]
Assignment ----Multiplication table using arrays








